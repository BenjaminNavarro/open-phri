/*      File: joint_velocity_proxy.h
 *       This file is part of the program open-phri
 *       Program description : OpenPHRI: a generic framework to easily and
 * safely control robots in interactions with humans Copyright (C) 2017 -
 * Benjamin Navarro (LIRMM). All Right reserved.
 *
 *       This software is free software: you can redistribute it and/or modify
 *       it under the terms of the LGPL license as published by
 *       the Free Software Foundation, either version 3
 *       of the License, or (at your option) any later version.
 *       This software is distributed in the hope that it will be useful,
 *       but WITHOUT ANY WARRANTY without even the implied warranty of
 *       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *       LGPL License for more details.
 *
 *       You should have received a copy of the GNU Lesser General Public
 * License version 3 and the General Public License version 3 along with this
 * program. If not, see <http://www.gnu.org/licenses/>.
 */

//! \file joint_velocity_proxy.h
//! \author Benjamin Navarro
//! \brief Generates a joint_velocity based on an externally managed one.
//! \date 05-2019
//! \ingroup phri

#pragma once

#include <OpenPHRI/joint_velocity_generators/joint_velocity_generator.h>
#include <OpenPHRI/definitions.h>
#include <OpenPHRI/detail/universal_wrapper.hpp>

namespace phri {

//! \brief Generates a joint velocity based on an externally managed one.
//! \details Can be useful to add a velocity generated by an external library or
//! to manually generate joint velocity profiles.
class JointVelocityProxy : public JointVelocityGenerator {
public:
    using generator = std::function<vector::dyn::Velocity(void)>;

    //! \brief Construct a new JointVelocityProxy object with an initial
    //! velocity set to zero.
    //! \details Use JointVelocityProxy::velocity() to set it to the desired
    //! value
    JointVelocityProxy();

    //! \brief Construct a new JointVelocityProxy object using the given
    //! vector::dyn::Velocity value, reference or (shared) pointer
    //!
    //! If velocity is a const reference/pointer, using velocity() to modify it
    //! will result in undefined behavior
    //!
    //! \tparam ExtVelocityT The type of the value (automatically deduced)
    //! \param value The desired velocity (N, Nm)
    template <typename ExtVelocityT,
              typename std::enable_if_t<
                  not std::is_same_v<ExtVelocityT, generator>, int> = 0>
    explicit JointVelocityProxy(ExtVelocityT&& velocity) noexcept
        : external_velocity_{std::forward<ExtVelocityT>(velocity)} {
    }

    //! \brief Construct a new JointVelocityProxy object forwarding the velocity
    //! generated by \p generator
    //! \param velocity The velocity to forward
    explicit JointVelocityProxy(const generator& generator);

    //! \brief Read/write access the velocity used by the generator
    //! \return double& A reference to the velocity
    void setVelocity(const vector::dyn::Velocity& velocity);

    //! \brief Read access the velocity used by the generator
    //! \return double The velocity value
    const vector::dyn::Velocity& getVelocity() const;

protected:
    void update(vector::dyn::Velocity& velocity) override;

    void setRobot(Robot const* robot) override;

    detail::UniversalWrapper<vector::dyn::Velocity> external_velocity_;
    generator generator_;
};

} // namespace phri
