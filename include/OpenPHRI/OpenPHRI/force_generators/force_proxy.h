/*      File: force_proxy.h
 *       This file is part of the program open-phri
 *       Program description : OpenPHRI: a generic framework to easily and
 * safely control robots in interactions with humans Copyright (C) 2017 -
 * Benjamin Navarro (LIRMM). All Right reserved.
 *
 *       This software is free software: you can redistribute it and/or modify
 *       it under the terms of the LGPL license as published by
 *       the Free Software Foundation, either version 3
 *       of the License, or (at your option) any later version.
 *       This software is distributed in the hope that it will be useful,
 *       but WITHOUT ANY WARRANTY without even the implied warranty of
 *       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *       LGPL License for more details.
 *
 *       You should have received a copy of the GNU Lesser General Public
 * License version 3 and the General Public License version 3 along with this
 * program. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file force_proxy.h
 * @author Benjamin Navarro
 * @brief Definition of the ForceProxy class
 * @date April 2017
 * @ingroup OpenPHRI
 */

#pragma once

#include <OpenPHRI/force_generators/force_generator.h>
#include <OpenPHRI/definitions.h>

namespace phri {

/** @brief Generates a force based on an externally managed one.
 *  @details Can be useful to add a velocity generated by an external library or
 * a force sensor.
 */
class ForceProxy : public ForceGenerator {
public:
    /** @brief Construct a force proxy given an externally managed force
     *  @param frame The reference frame in which the force is expressed
     */
    explicit ForceProxy(Vector6dConstPtr force,
                        ReferenceFrame frame = ReferenceFrame::TCP);

    explicit ForceProxy(Vector6dConstPtr force, ReferenceFrame frame,
                        std::function<void(void)> update_func);

    ~ForceProxy() = default;

protected:
    virtual void update(Vector6d& force) override;

    Vector6dConstPtr force_ptr_;
    std::function<void(void)> update_func_;
};

using ForceProxyPtr = std::shared_ptr<ForceProxy>;
using ForceProxyConstPtr = std::shared_ptr<const ForceProxy>;

} // namespace phri
