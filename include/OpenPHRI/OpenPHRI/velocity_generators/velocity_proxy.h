/*      File: velocity_proxy.h
 *       This file is part of the program open-phri
 *       Program description : OpenPHRI: a generic framework to easily and
 * safely control robots in interactions with humans Copyright (C) 2017 -
 * Benjamin Navarro (LIRMM). All Right reserved.
 *
 *       This software is free software: you can redistribute it and/or modify
 *       it under the terms of the LGPL license as published by
 *       the Free Software Foundation, either version 3
 *       of the License, or (at your option) any later version.
 *       This software is distributed in the hope that it will be useful,
 *       but WITHOUT ANY WARRANTY without even the implied warranty of
 *       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *       LGPL License for more details.
 *
 *       You should have received a copy of the GNU Lesser General Public
 * License version 3 and the General Public License version 3 along with this
 * program. If not, see <http://www.gnu.org/licenses/>.
 */

//! \file velocity_proxy.h
//! \author Benjamin Navarro
//! \brief  Generates a velocity based on an externally managed one.
//! \date 05-2019
//! \ingroup phri

#pragma once

#include <OpenPHRI/velocity_generators/velocity_generator.h>
#include <OpenPHRI/definitions.h>
#include <functional>

namespace phri {

//! \brief Generates a velocity based on an externally managed one.
//! \details Can be useful to add a velocity generated by an external library or
//! to manually generate velocity profiles.
class VelocityProxy : public VelocityGenerator {
public:
    using generator = std::function<spatial::Velocity(void)>;

    //! \brief Construct a new VelocityProxy object with an initial velocity set
    //! to zero.
    //! \details Use VelocityProxy::velocity() to set it to the desired value
    VelocityProxy() = default;

    //! \brief Construct a new VelocityProxy object forwarding the given pointed
    //! value
    //! \param velocity The velocity to forward
    VelocityProxy(std::shared_ptr<spatial::Velocity> velocity);

    //! \brief Construct a new VelocityProxy object forwarding the given
    //! referenced value
    //! \param velocity The velocity to forward. Make sure that \p velocity
    //! outlives the generator
    VelocityProxy(spatial::Velocity& velocity);

    //! \brief Construct a new VelocityProxy object forwarding the given value
    //! \param velocity The velocity to forward
    VelocityProxy(const spatial::Velocity& velocity);

    //! \brief Construct a new VelocityProxy object forwarding the given value
    //! \param velocity The velocity to forward
    VelocityProxy(spatial::Velocity&& velocity);

    //! \brief Construct a new VelocityProxy object forwarding the velocity
    //! generated by \p generator
    //! \param velocity The velocity to forward
    VelocityProxy(const generator& generator);

    //! \brief Default copy constructor
    VelocityProxy(const VelocityProxy&) = default;

    //! \brief Default move constructor
    VelocityProxy(VelocityProxy&&) = default;

    //! \brief Default virtual destructor
    //! \details If \ref VelocityProxy::external_velocity_ was
    //! created using an rvalue reference, the pointed memory won't be released
    virtual ~VelocityProxy() = default;

    //! \brief Default copy operator
    VelocityProxy& operator=(const VelocityProxy&) = default;

    //! \brief Default move operator
    VelocityProxy& operator=(VelocityProxy&&) = default;

    //! \brief Read/write access the velocity used by the generator
    //! \return double& A reference to the velocity
    spatial::Velocity& velocity();

    //! \brief Read access the velocity used by the generator
    //! \return double The velocity value
    const spatial::Velocity& velocity() const;

    //! \brief Access to the shared pointer holding the velocity used
    //! by the generator
    //! \return std::shared_ptr<double> A shared pointer to the forwarded
    //! velocity
    std::shared_ptr<spatial::Velocity> velocityPtr() const;

protected:
    virtual void update(spatial::Velocity& velocity) override;

    std::shared_ptr<spatial::Velocity> external_velocity_;
    generator generator_;
};

} // namespace phri
