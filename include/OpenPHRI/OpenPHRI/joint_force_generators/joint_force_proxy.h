/*      File: joint_force_proxy.h
 *       This file is part of the program open-phri
 *       Program description : OpenPHRI: a generic framework to easily and
 * safely control robots in interactions with humans Copyright (C) 2017 -
 * Benjamin Navarro (LIRMM). All Right reserved.
 *
 *       This software is free software: you can redistribute it and/or modify
 *       it under the terms of the LGPL license as published by
 *       the Free Software Foundation, either version 3
 *       of the License, or (at your option) any later version.
 *       This software is distributed in the hope that it will be useful,
 *       but WITHOUT ANY WARRANTY without even the implied warranty of
 *       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *       LGPL License for more details.
 *
 *       You should have received a copy of the GNU Lesser General Public
 * License version 3 and the General Public License version 3 along with this
 * program. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file joint_force_proxy.h
 * @author Benjamin Navarro
 * @brief Definition of the ForceProxy class
 * @date April 2017
 * @ingroup OpenPHRI
 */

#pragma once

#include <OpenPHRI/joint_force_generators/joint_force_generator.h>
#include <OpenPHRI/definitions.h>

#include <OpenPHRI/detail/universal_wrapper.hpp>

namespace phri {

//! \brief Generates a joint force based on an externally managed one.
//! \details Can be useful to add a force generated by an external library or
//! to manually generate joint force profiles.
class JointForceProxy : public JointForceGenerator {
public:
    using generator = std::function<vector::dyn::Force(void)>;

    //! \brief Construct a new JointForceProxy object with an initial
    //! force set to zero.
    //! \details Use JointForceProxy::force() to set it to the desired
    //! value
    JointForceProxy();

    //! \brief Construct a new JointForceProxy object using the given
    //! vector::dyn::Force value, reference or (shared) pointer
    //!
    //! If force is a const reference/pointer, using force() to modify it
    //! will result in undefined behavior
    //!
    //! \tparam ExtForceT The type of the value (automatically deduced)
    //! \param value The desired force (N, Nm)
    template <typename ExtForceT,
              typename std::enable_if_t<
                  not std::is_same_v<ExtForceT, generator>, int> = 0>
    explicit JointForceProxy(ExtForceT&& force) noexcept
        : external_force_{std::forward<ExtForceT>(force)} {
    }

    //! \brief Construct a new JointForceProxy object forwarding the force
    //! generated by \p generator
    //! \param force The force to forward
    explicit JointForceProxy(const generator& generator);

    //! \brief Read/write access the force used by the generator
    //! \return double& A reference to the force
    void setForce(const vector::dyn::Force& force);

    //! \brief Read access the force used by the generator
    //! \return double The force value
    const vector::dyn::Force& getForce() const;

protected:
    virtual void update(vector::dyn::Force& force) override;

    virtual void setRobot(Robot const* robot) override;

    detail::UniversalWrapper<vector::dyn::Force> external_force_;
    generator generator_;
};

} // namespace phri
